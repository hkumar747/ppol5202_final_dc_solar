geom_sf(aes(fill = majority)) +
scale_fill_manual(values = c("Majority Renewable" = "#b2df8a", "Majority Non-renewable" = "#1f78b4")) + #exclude all other labels exc. Canada
geom_sf_text(data = subset(world_ne_joined, ADMIN == 'Canada'), aes(label = ADMIN), size = 3,  family = "serif") +
ggtitle("Renewable energy in the Americas") +
labs(
subtitle = "More than 50% of facilities produce renewable energy in most countries",
caption = "Data Source: GPPD 2019",
fill = ""
) +
theme(
plot.title = element_text(hjust = 0, family = "serif"),
plot.subtitle = element_text(hjust = 0, family = "serif"),
plot.caption = element_text(hjust = 1),  # Right align caption
legend.position = "bottom",
axis.text = element_blank(),  # Remove axis text
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),  # Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
panel.background = element_blank()  # Remove panel background
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank()  # Remove grid lines
)
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen2"))(5)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank()  # Remove grid lines
)
install.packages("ggmap")
library(ggmap)
bbox <- st_bbox(tract_solar)
osm_map <- get_map(location = c(lon = mean(bbox[c(1, 3)]), lat = mean(bbox[c(2, 4)])),
zoom = 12, source = "osm")
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen2"))(5)
# Plot the data
ggmap(osm_map) + ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank()  # Remove grid lines
)
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen2"))(5)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank()  # Remove grid lines
)
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen3"))(5)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank()  # Remove grid lines
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 1)  # Right-align caption
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 2)  # Right-align caption
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, Monthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = -1)  # Right-align caption
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = -1,  parse = TRUE)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = -1)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 0)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 1)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 2)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 1.5)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = -1)  # Right-align caption, parse linebreak
)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 0)  # Right-align caption, parse linebreak
)
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen3"))(5)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 1)  # Right-align caption, parse linebreak
)
```{r, fig.width=8, fig.height=8}
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen3"))(5)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 1)  # Right-align caption, parse linebreak
)
# Cut Total_Capacity into quintiles
tract_solar$Total_Capacity_q <- cut(tract_solar$Total_Capacity, breaks = quantile(tract_solar$Total_Capacity, probs=0:5/5), labels = c("0.015 - 0.48", "0.48 - 0.77", "0.77 - 1.07", "1.07 - 1.49", "1.49 - 8.78"),include.lowest = TRUE)
# Create a color palette
pal <- colorRampPalette(c("tomato1", "yellow2", "springgreen3"))(5)
# Plot the data
ggplot(data = tract_solar) +
geom_sf(aes(fill = Total_Capacity_q),  color = "white") +  # Fill based on 'Total_Capacity_q'
scale_fill_manual(values = pal, name = "Capacity (MW)") +
# Use custom color scale
labs(
title = "Installed Solar Panel Capacity in megawatts (MW)",
subtitle = "Washington DC census tracts, 2023",
caption = "Data Source: DC Public Service Commission, \nMonthly Update of Solar Generation 2023"  ) +
theme_minimal() + theme(
axis.text = element_blank(),  # Remove axis text (lat and long)
axis.ticks = element_blank(),  # Remove axis ticks
axis.title = element_blank(),# Remove axis titles
panel.grid = element_blank(),  # Remove grid lines
plot.caption = element_text(hjust = 1)  # Right-align caption, parse linebreak
)
shiny::runApp('D:/Work/Georgetown/acad/sem3/viz/dc_shiny_viz/shinyapp3')
reticulate::repl_python()
os.chdir('D:\Work\Georgetown\acad\sem3\viz\tutorial_msno')
msno.matrix(df.sample(frac=0.3))
import missingno as msno
import pandas as pd
import os
os.chdir('D:\Work\Georgetown\acad\sem3\viz\tutorial_msno')
# Load your dataset
df = pd.read_csv('your_dataset.csv')
# Matrix plot
msno.matrix(df.sample(frac=0.3))
r
# Install and load required packages
if (!require(leaflet)) install.packages("leaflet")
if (!require(sf)) install.packages("sf")
if (!require(dplyr)) install.packages("dplyr")
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addTiles() %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addTiles() %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addTiles() %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
View(df)
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
View(df)
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1,
popup = ~paste("Address:", `Facility Address`, "<br>Potential MW:", potential_capacity_kw)
) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1,
popup = ~paste("Address:", `Facility Address`, "<br>Potential MW:", potential_capacity_kw)) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1,
popup = ~paste("<br>Potential MW:", potential_capacity_kw)) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
# Install and load required packages
library(leaflet)
library(sf)
library(dplyr)
# Sample data frame (replace this with your actual data frame)
df <- read.csv('park10.csv')
# Convert the geometry column from WKT to an sf object
df <- st_as_sf(df, wkt = "geometry", crs = 4326)
# Plot using leaflet
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(color = ~colorNumeric(palette = "viridis", domain = df$potential_capacity_kw)(potential_capacity_kw),
fillOpacity = 0.7, weight = 1,
popup = ~paste("<br>Potential Cap KW:", potential_capacity_kw)) %>%
addLegend("bottomright", pal = colorNumeric(palette = "viridis", domain = df$potential_capacity_kw),
values = df$potential_capacity_kw,
title = "Potential Capacity (kW)")
shiny::runApp('D:/Work/Georgetown/acad/sem3/viz/dc_shiny_viz/shinyapp3')
rsconnect::setAccountInfo(name='hk939-ppol5202-2023',
token='652AABF1FC0F87CF7CF28A669842F034',
secret='6f7A1kSxHKF7Nk/ifvAqNweof4rdPwK2KoRjXLYS')
setwd('D:/Work/Georgetown/acad/sem3/viz/finproj/dc_solar_shiny_fnl')
shiny::runApp()
runApp()
runApp()
